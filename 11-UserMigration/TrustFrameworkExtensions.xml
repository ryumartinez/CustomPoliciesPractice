<?xml version="1.0" encoding="utf-8" ?>
<TrustFrameworkPolicy 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
  xmlns="http://schemas.microsoft.com/online/cpim/schemas/2013/06" 
  PolicySchemaVersion="0.3.0.0" 
  TenantId="certiversepoc.onmicrosoft.com" 
  PolicyId="B2C_1A_TrustFrameworkExtensions" 
  PublicPolicyUri="http://certiversepoc.onmicrosoft.com/B2C_1A_TrustFrameworkExtensions">
  
  <BasePolicy>
    <TenantId>certiversepoc.onmicrosoft.com</TenantId>
    <PolicyId>B2C_1A_TrustFrameworkLocalization</PolicyId>
  </BasePolicy>
  <BuildingBlocks>
      <ClaimsSchema>
          <!-- Holds the value of the migration status on the Azure AD B2C account -->
          <ClaimType Id="extension_requiresMigration">
              <DisplayName>extension_requiresMigration</DisplayName>
              <DataType>boolean</DataType>
              <AdminHelpText>extension_requiresMigration</AdminHelpText>
              <UserHelpText>extension_requiresMigration</UserHelpText>
          </ClaimType>
          <!-- Holds the value of whether the authentication succeeded at the legacy IdP -->
          <ClaimType Id="tokenSuccess">
              <DisplayName>tokenSuccess</DisplayName>
              <DataType>boolean</DataType>
              <AdminHelpText>tokenSuccess</AdminHelpText>
              <UserHelpText>tokenSuccess</UserHelpText>
          </ClaimType>
          <!-- Holds the value 'false' when the legacy IdP authentication succeeded -->
          <ClaimType Id="migrationRequired">
              <DisplayName>migrationRequired</DisplayName>
              <DataType>boolean</DataType>
              <AdminHelpText>migrationRequired</AdminHelpText>
              <UserHelpText>migrationRequired</UserHelpText>
          </ClaimType>
      </ClaimsSchema>

  </BuildingBlocks>

  <ClaimsProviders>

      <ClaimsProvider>
          <DisplayName>Local Account SignIn - Read migration status</DisplayName>
          <TechnicalProfiles>
              <TechnicalProfile Id="Get-requiresMigration-status-signin">
                  <Metadata>
                      <Item Key="ClientId">c3a79a9b-60a7-4056-afa2-a553ce5ebb7d</Item>
                      <Item Key="ApplicationObjectId">1cf91709-e0fe-4c31-b96c-e225a8063960</Item>
                      <Item Key="Operation">Read</Item>
                      <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
                      <Item Key="UserMessageIfClaimsPrincipalDoesNotExist">An account could not be found for the provided user ID.</Item>
                  </Metadata>
                  <IncludeInSso>false</IncludeInSso>
                  <InputClaims>
                      <InputClaim ClaimTypeReferenceId="signInName" PartnerClaimType="signInNames.emailAddress" Required="true" />
                  </InputClaims>
                  <OutputClaims>
                      <OutputClaim ClaimTypeReferenceId="objectId" />
                      <!-- Set a default value (false) in the case the account does not have this attribute defined -->
                      <OutputClaim ClaimTypeReferenceId="extension_requiresMigration" DefaultValue="false" />
                  </OutputClaims>
                  <IncludeTechnicalProfile ReferenceId="AAD-Common" />
              </TechnicalProfile>
          </TechnicalProfiles>
      </ClaimsProvider>

      <ClaimsProvider>
          <DisplayName>REST API to communicate with Legacy IdP</DisplayName>
          <TechnicalProfiles>
              <TechnicalProfile Id="UserMigrationViaLegacyIdp">
                  <DisplayName>REST API call to communicate with Legacy IdP</DisplayName>
                  <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                  <Metadata>
                      <Item Key="ServiceUrl">https://auth020241224085700.azurewebsites.net/api/identity</Item>
                      <Item Key="AuthenticationType">None</Item>
                      <Item Key="SendClaimsIn">Body</Item>
                  </Metadata>
                  <InputClaims>
                      <InputClaim ClaimTypeReferenceId="signInName" PartnerClaimType="email" />
                      <InputClaim ClaimTypeReferenceId="password" />
                  </InputClaims>
                  <OutputClaims>
                      <OutputClaim ClaimTypeReferenceId="tokenSuccess" DefaultValue="false"/>
                      <OutputClaim ClaimTypeReferenceId="migrationRequired"/>
                  </OutputClaims>
                  <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
              </TechnicalProfile>
          </TechnicalProfiles>
      </ClaimsProvider>

      <ClaimsProvider>
          <DisplayName>Local Account SignIn - Write new password and unmark for migration</DisplayName>
          <TechnicalProfiles>
              <TechnicalProfile Id="AAD-WritePasswordAndFlipMigratedFlag">
                  <Metadata>
                      <Item Key="ClientId">c3a79a9b-60a7-4056-afa2-a553ce5ebb7d</Item>
                      <Item Key="ApplicationObjectId">1cf91709-e0fe-4c31-b96c-e225a8063960</Item>
                      <Item Key="Operation">Write</Item>
                      <Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">false</Item>
                  </Metadata>
                  <IncludeInSso>false</IncludeInSso>
                  <InputClaims>
                      <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
                  </InputClaims>
                  <PersistedClaims>
                      <PersistedClaim ClaimTypeReferenceId="objectId" />
                      <PersistedClaim ClaimTypeReferenceId="password" PartnerClaimType="password"/>
                      <PersistedClaim ClaimTypeReferenceId="migrationRequired" PartnerClaimType="extension_requiresMigration"/>
                  </PersistedClaims>
                  <IncludeTechnicalProfile ReferenceId="AAD-Common" />
                  <UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD" />
              </TechnicalProfile>
          </TechnicalProfiles>
      </ClaimsProvider>

      <ClaimsProvider>
          <DisplayName>Local Account Sign In</DisplayName>
          <TechnicalProfiles>
              <TechnicalProfile Id="SelfAsserted-LocalAccountSignin-Email">
                  <OutputClaims>
                      <OutputClaim ClaimTypeReferenceId="extension_requiresMigration" />
                  </OutputClaims>
                  <ValidationTechnicalProfiles>
                      <!--Add user migration validation technical profiles before login-NonInteractive -->

                      <!-- Populate extension_requireMigration into the claims pipeline -->
                      <ValidationTechnicalProfile ReferenceId="Get-requiresMigration-status-signin" ContinueOnError="false" />

                      <!-- If extension_requireMigration is true, call the legacy IdP via the REST API -->
                      <ValidationTechnicalProfile ReferenceId="UserMigrationViaLegacyIdp" ContinueOnError="false">
                          <Preconditions>
                              <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                                  <Value>extension_requiresMigration</Value>
                                  <Value>False</Value>
                                  <Action>SkipThisValidationTechnicalProfile</Action>
                              </Precondition>
                          </Preconditions>
                      </ValidationTechnicalProfile>

                      <!-- If the API returned 'tokensuccess', write the new password and unmark the account for migration -->
                      <ValidationTechnicalProfile ReferenceId="AAD-WritePasswordAndFlipMigratedFlag" ContinueOnError="false">
                          <Preconditions>
                              <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
                                  <Value>tokenSuccess</Value>
                                  <Action>SkipThisValidationTechnicalProfile</Action>
                              </Precondition>
                          </Preconditions>
                      </ValidationTechnicalProfile>

                      <!-- Initiate a normal logon against Azure AD B2C -->
                      <ValidationTechnicalProfile ReferenceId="login-NonInteractive" />
                  </ValidationTechnicalProfiles>
              </TechnicalProfile>
              <TechnicalProfile Id="login-NonInteractive">
                  <Metadata>
                      <Item Key="client_id">57a18278-6e97-4c78-b502-bfe7e4717ed5</Item>
                      <Item Key="IdTokenAudience">06c6404f-412c-4651-93aa-9eb897427f84</Item>
                  </Metadata>
                  <InputClaims>
                      <InputClaim ClaimTypeReferenceId="client_id" DefaultValue="57a18278-6e97-4c78-b502-bfe7e4717ed5" />
                      <InputClaim ClaimTypeReferenceId="resource_id" PartnerClaimType="resource" DefaultValue="06c6404f-412c-4651-93aa-9eb897427f84" />
                  </InputClaims>
              </TechnicalProfile>
          </TechnicalProfiles>
      </ClaimsProvider>

      <ClaimsProvider>
          <DisplayName>Local Account Password Reset - Read migration flag</DisplayName>
          <TechnicalProfiles>
              <TechnicalProfile Id="Get-requiresMigration-status-password-reset">
                  <Metadata>
                      <Item Key="ClientId">c3a79a9b-60a7-4056-afa2-a553ce5ebb7d</Item>
                      <Item Key="ApplicationObjectId">1cf91709-e0fe-4c31-b96c-e225a8063960</Item>
                      <Item Key="Operation">Read</Item>
                      <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
                      <Item Key="UserMessageIfClaimsPrincipalDoesNotExist">An account could not be found for the provided user ID.</Item>
                  </Metadata>
                  <IncludeInSso>false</IncludeInSso>
                  <InputClaims>
                      <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
                  </InputClaims>
                  <OutputClaims>
                      <OutputClaim ClaimTypeReferenceId="extension_requiresMigration" DefaultValue="false" />
                  </OutputClaims>
                  <IncludeTechnicalProfile ReferenceId="AAD-Common" />
              </TechnicalProfile>
          </TechnicalProfiles>
      </ClaimsProvider>

      <ClaimsProvider>
          <DisplayName>Local Account Password Reset - Flip migration flag</DisplayName>
          <TechnicalProfiles>
              <TechnicalProfile Id="AAD-FlipMigratedFlag">
                  <Metadata>
                      <Item Key="ClientId">c3a79a9b-60a7-4056-afa2-a553ce5ebb7d</Item>
                      <Item Key="ApplicationObjectId">1cf91709-e0fe-4c31-b96c-e225a8063960</Item>
                      <Item Key="Operation">Write</Item>
                      <Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">false</Item>
                  </Metadata>
                  <IncludeInSso>false</IncludeInSso>
                  <InputClaims>
                      <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
                  </InputClaims>
                  <PersistedClaims>
                      <PersistedClaim ClaimTypeReferenceId="objectId" />
                      <PersistedClaim ClaimTypeReferenceId="migrationRequired" PartnerClaimType="extension_requiresMigration" DefaultValue="False" AlwaysUseDefaultValue="true"/>
                  </PersistedClaims>
                  <IncludeTechnicalProfile ReferenceId="AAD-Common" />
                  <UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD" />
              </TechnicalProfile>
          </TechnicalProfiles>
      </ClaimsProvider>

      <ClaimsProvider>
          <DisplayName>Local Account Password Reset - Write Password</DisplayName>
          <TechnicalProfiles>
              <TechnicalProfile Id="LocalAccountWritePasswordUsingObjectId">
                  <ValidationTechnicalProfiles>
                      <ValidationTechnicalProfile ReferenceId="Get-requiresMigration-status-password-reset" ContinueOnError="false" />
                      <ValidationTechnicalProfile ReferenceId="AAD-FlipMigratedFlag" ContinueOnError="false">
                          <Preconditions>
                              <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                                  <Value>extension_requiresMigration</Value>
                                  <Value>False</Value>
                                  <Action>SkipThisValidationTechnicalProfile</Action>
                              </Precondition>
                          </Preconditions>
                      </ValidationTechnicalProfile>
                      <ValidationTechnicalProfile ReferenceId="AAD-UserWritePasswordUsingObjectId" />
                  </ValidationTechnicalProfiles>
              </TechnicalProfile>
          </TechnicalProfiles>
      </ClaimsProvider>

  </ClaimsProviders>

    <!--UserJourneys>
	
	</UserJourneys-->

</TrustFrameworkPolicy>
