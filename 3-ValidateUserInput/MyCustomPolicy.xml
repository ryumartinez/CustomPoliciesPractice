<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<TrustFrameworkPolicy xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                      xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                      xmlns="http://schemas.microsoft.com/online/cpim/schemas/2013/06"
                      xmlns:schemaLocation="https://raw.githubusercontent.com/Azure-Samples/active-directory-b2c-custom-policy-starterpack/master/TrustFrameworkPolicy_0.3.0.0.xsd"
                      PolicySchemaVersion="0.3.0.0" TenantId="certiversepoc.onmicrosoft.com"
                      PolicyId="B2C_1A_ContosoCustomPolicy"
                      PublicPolicyUri="http://certiversepoc.onmicrosoft.com/B2C_1A_ContosoCustomPolicy">
<!--
//////////////////////////
/////////////////////////
BUILDING BLOCKS
  CLAIM SCHEMA
  CLAIM TRANSFORMATIONS
  CONTENT DEFINITIONS
-->
<BuildingBlocks>

  <ClaimsSchema>
    <ClaimType Id="password">
      <DisplayName>Password</DisplayName>
      <DataType>string</DataType>
      <AdminHelpText>Enter password</AdminHelpText>
      <UserHelpText>Enter password</UserHelpText>
      <UserInputType>Password</UserInputType>
      <PredicateValidationReference Id="StrongPassword" />
    </ClaimType>

    <ClaimType Id="reenterPassword">
      <DisplayName>Confirm new password</DisplayName>
      <DataType>string</DataType>
      <AdminHelpText>Confirm new password</AdminHelpText>
      <UserHelpText>Reenter password</UserHelpText>
      <UserInputType>Password</UserInputType>
    </ClaimType>

    <ClaimType Id="email">
      <DisplayName>Email Address</DisplayName>
      <DataType>string</DataType>
      <DefaultPartnerClaimTypes>
        <Protocol Name="OpenIdConnect" PartnerClaimType="email"/>
      </DefaultPartnerClaimTypes>
      <UserHelpText>Your email address. </UserHelpText>
      <UserInputType>TextBox</UserInputType>
      <Restriction>
        <Pattern RegularExpression="^[a-zA-Z0-9.!#$%&amp;&apos;^_`{}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$" HelpText="Please enter a valid email address something like maurice@contoso.com"/>
      </Restriction>
    </ClaimType>

    <ClaimType Id="objectId">
      <DisplayName>unique object Id for subject of the claims being returned</DisplayName>
      <DataType>string</DataType>
    </ClaimType>

    <ClaimType Id="message">
      <DisplayName>Will hold Hello World message</DisplayName>
      <DataType>string</DataType>
    </ClaimType>

    <ClaimType Id="accountType">
      <DisplayName>Account Type</DisplayName>
      <DataType>string</DataType>
      <UserHelpText>The type of account used by the user</UserHelpText>
      <UserInputType>RadioSingleSelect</UserInputType>
      <Restriction>
        <Enumeration Text="Contoso Employee Account" Value="work" SelectByDefault="true"/>
        <Enumeration Text="Personal Account" Value="personal" SelectByDefault="false"/>
      </Restriction>
    </ClaimType>

    <ClaimType Id="givenName">
      <DisplayName>Given Name</DisplayName>
      <DataType>string</DataType>
      <UserHelpText>Your given name (also known as first name).</UserHelpText>
      <UserInputType>TextBox</UserInputType>
    </ClaimType>

    <ClaimType Id="surname">
      <DisplayName>Surname</DisplayName>
      <DataType>string</DataType>
      <UserHelpText>Your surname (also known as family name or last name).</UserHelpText>
      <UserInputType>TextBox</UserInputType>
    </ClaimType>

    <ClaimType Id="displayName">
      <DisplayName>Display Name</DisplayName>
      <DataType>string</DataType>
      <UserHelpText>Your display name.</UserHelpText>
      <UserInputType>TextBox</UserInputType>
    </ClaimType>
  </ClaimsSchema>

  <Predicates>
    <Predicate Id="IsLengthBetween8And64" Method="IsLengthRange" HelpText="The password must be between 8 and 64 characters.">
      <Parameters>
        <Parameter Id="Minimum">8</Parameter>
        <Parameter Id="Maximum">64</Parameter>
      </Parameters>
    </Predicate>

    <Predicate Id="Lowercase" Method="IncludesCharacters" HelpText="a lowercase letter">
      <Parameters>
        <Parameter Id="CharacterSet">a-z</Parameter>
      </Parameters>
    </Predicate>

    <Predicate Id="Uppercase" Method="IncludesCharacters" HelpText="an uppercase letter">
      <Parameters>
        <Parameter Id="CharacterSet">A-Z</Parameter>
      </Parameters>
    </Predicate>

    <Predicate Id="Number" Method="IncludesCharacters" HelpText="a digit">
      <Parameters>
        <Parameter Id="CharacterSet">0-9</Parameter>
      </Parameters>
    </Predicate>

    <Predicate Id="Symbol" Method="IncludesCharacters" HelpText="a symbol">
      <Parameters>
        <Parameter Id="CharacterSet">@#$%^&amp;*\-_+=[]{}|\\:',.?/`~"();!</Parameter>
      </Parameters>
    </Predicate>

    <Predicate Id="PIN" Method="MatchesRegex" HelpText="The password must be numbers only.">
      <Parameters>
        <Parameter Id="RegularExpression">^[0-9]+$</Parameter>
      </Parameters>
    </Predicate>

    <Predicate Id="AllowedCharacters" Method="MatchesRegex" HelpText="An invalid character was provided.">
      <Parameters>
        <Parameter Id="RegularExpression">(^([0-9A-Za-z\d@#$%^&amp;*\-_+=[\]{}|\\:',?/`~"();! ]|(\.(?!@)))+$)|(^$)</Parameter>
      </Parameters>
    </Predicate>

    <Predicate Id="DisallowedWhitespace" Method="MatchesRegex" HelpText="The password must not begin or end with a whitespace character.">
      <Parameters>
        <Parameter Id="RegularExpression">(^\S.*\S$)|(^\S+$)|(^$)</Parameter>
      </Parameters>
    </Predicate>
  </Predicates>

  <PredicateValidations>
    <PredicateValidation Id="SimplePassword">
      <PredicateGroups>
        <PredicateGroup Id="DisallowedWhitespaceGroup">
          <PredicateReferences>
            <PredicateReference Id="DisallowedWhitespace"/>
          </PredicateReferences>
        </PredicateGroup>
        <PredicateGroup Id="AllowedCharactersGroup">
          <PredicateReferences>
            <PredicateReference Id="AllowedCharacters"/>
          </PredicateReferences>
        </PredicateGroup>
        <PredicateGroup Id="LengthGroup">
          <PredicateReferences>
            <PredicateReference Id="IsLengthBetween8And64"/>
          </PredicateReferences>
        </PredicateGroup>
      </PredicateGroups>
    </PredicateValidation>
    <PredicateValidation Id="StrongPassword">
      <PredicateGroups>
        <PredicateGroup Id="DisallowedWhitespaceGroup">
          <PredicateReferences>
            <PredicateReference Id="DisallowedWhitespace"/>
          </PredicateReferences>
        </PredicateGroup>
        <PredicateGroup Id="AllowedCharactersGroup">
          <PredicateReferences>
            <PredicateReference Id="AllowedCharacters"/>
          </PredicateReferences>
        </PredicateGroup>
        <PredicateGroup Id="LengthGroup">
          <PredicateReferences>
            <PredicateReference Id="IsLengthBetween8And64"/>
          </PredicateReferences>
        </PredicateGroup>
        <PredicateGroup Id="CharacterClasses">
          <UserHelpText>The password must have at least 3 of the following:</UserHelpText>
          <PredicateReferences MatchAtLeast="3">
            <PredicateReference Id="Lowercase"/>
            <PredicateReference Id="Uppercase"/>
            <PredicateReference Id="Number"/>
            <PredicateReference Id="Symbol"/>
          </PredicateReferences>
        </PredicateGroup>
      </PredicateGroups>
    </PredicateValidation>
    <PredicateValidation Id="CustomPassword">
      <PredicateGroups>
        <PredicateGroup Id="DisallowedWhitespaceGroup">
          <PredicateReferences>
            <PredicateReference Id="DisallowedWhitespace"/>
          </PredicateReferences>
        </PredicateGroup>
        <PredicateGroup Id="AllowedCharactersGroup">
          <PredicateReferences>
            <PredicateReference Id="AllowedCharacters"/>
          </PredicateReferences>
        </PredicateGroup>
      </PredicateGroups>
    </PredicateValidation>
  </PredicateValidations>

  <ClaimsTransformations>
    <ClaimsTransformation Id="GenerateRandomObjectIdTransformation" TransformationMethod="CreateRandomString">
      <InputParameters>
        <InputParameter Id="randomGeneratorType" DataType="string" Value="GUID"/>
      </InputParameters>
      <OutputClaims>
        <OutputClaim ClaimTypeReferenceId="objectId" TransformationClaimType="outputClaim"/>
      </OutputClaims>
    </ClaimsTransformation>

    <ClaimsTransformation Id="CreateDisplayNameTransformation" TransformationMethod="FormatStringMultipleClaims">
      <InputClaims>
        <InputClaim ClaimTypeReferenceId="givenName" TransformationClaimType="inputClaim1"/>
        <InputClaim ClaimTypeReferenceId="surname" TransformationClaimType="inputClaim2"/>
      </InputClaims>
      <InputParameters>
        <InputParameter Id="stringFormat" DataType="string" Value="{0} {1}"/>
      </InputParameters>
      <OutputClaims>
        <OutputClaim ClaimTypeReferenceId="displayName" TransformationClaimType="outputClaim"/>
      </OutputClaims>
    </ClaimsTransformation>

    <ClaimsTransformation Id="CreateMessageTransformation" TransformationMethod="FormatStringClaim">
      <InputClaims>
        <InputClaim ClaimTypeReferenceId="displayName" TransformationClaimType="inputClaim"/>
      </InputClaims>
      <InputParameters>
        <InputParameter Id="stringFormat" DataType="string" Value="Hello {0}"/>
      </InputParameters>
      <OutputClaims>
        <OutputClaim ClaimTypeReferenceId="message" TransformationClaimType="outputClaim"/>
      </OutputClaims>
    </ClaimsTransformation>
  </ClaimsTransformations>

  <ContentDefinitions>
    <ContentDefinition Id="SelfAssertedContentDefinition">
      <LoadUri>~/tenant/templates/AzureBlue/selfAsserted.cshtml</LoadUri>
      <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
      <DataUri>urn:com:microsoft:aad:b2c:elements:contract:selfasserted:2.1.7</DataUri>
    </ContentDefinition>
  </ContentDefinitions>
</BuildingBlocks>



<!--
//////////////////////////
/////////////////////////
CLAIM PROVIDERS
  TECHNICAL PROFILES
    TECHNICAL PROFILE
      DISPLAYNAME
      PROTOCOL
      METADATA
      DISPLAYCLAIMS
      OUTPUTCLAIMS
-->
<ClaimsProviders>
  <ClaimsProvider>
    <DisplayName>Token Issuer</DisplayName>
    <TechnicalProfiles>
      <TechnicalProfile Id="JwtIssuer">
        <DisplayName>JWT Issuer</DisplayName>
        <Protocol Name="None"/>
        <OutputTokenFormat>JWT</OutputTokenFormat>
        <Metadata>
          <Item Key="client_id">{service:te}</Item>
          <Item Key="issuer_refresh_token_user_identity_claim_type">objectId</Item>
          <Item Key="SendTokenResponseBodyWithJsonNumbers">true</Item>
        </Metadata>
        <CryptographicKeys>
          <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer"/>
          <Key Id="issuer_refresh_token_key" StorageReferenceId="B2C_1A_TokenEncryptionKeyContainer"/>
        </CryptographicKeys>
      </TechnicalProfile>
    </TechnicalProfiles>
  </ClaimsProvider>

  <ClaimsProvider>

    <DisplayName>Trustframework Policy Engine TechnicalProfiles</DisplayName>
    <TechnicalProfiles>
      <TechnicalProfile Id="TpEngine_c3bd4fe2-1775-4013-b91d-35f16d377d13">
        <DisplayName>Trustframework Policy Engine Default Technical Profile</DisplayName>
        <Protocol Name="None"/>
        <Metadata>
          <Item Key="url">{service:te}</Item>
        </Metadata>
      </TechnicalProfile>
    </TechnicalProfiles>
  </ClaimsProvider>

  <ClaimsProvider>
    <DisplayName>Claim Generator Technical Profiles</DisplayName>
    <TechnicalProfiles>
      <TechnicalProfile Id="ClaimGenerator">
        <DisplayName>Generate Object ID, displayName and  message Claims Technical Profile.</DisplayName>
        <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="objectId"/>
          <OutputClaim ClaimTypeReferenceId="displayName"/>
          <OutputClaim ClaimTypeReferenceId="message"/>
        </OutputClaims>
        <OutputClaimsTransformations>
          <OutputClaimsTransformation ReferenceId="GenerateRandomObjectIdTransformation"/>
          <OutputClaimsTransformation ReferenceId="CreateDisplayNameTransformation"/>
          <OutputClaimsTransformation ReferenceId="CreateMessageTransformation"/>
        </OutputClaimsTransformations>
      </TechnicalProfile>
    </TechnicalProfiles>
  </ClaimsProvider>

  <ClaimsProvider>
    <DisplayName>Technical Profiles to collect user's details</DisplayName>
    <TechnicalProfiles>
      <TechnicalProfile Id="UserInformationCollector">
        <DisplayName>Collect User Input Technical Profile</DisplayName>
        <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
        <Metadata>
          <Item Key="ContentDefinitionReferenceId">SelfAssertedContentDefinition</Item>
        </Metadata>
        <DisplayClaims>
          <DisplayClaim ClaimTypeReferenceId="reenterPassword" Required="true"/>
          <DisplayClaim ClaimTypeReferenceId="password" Required="true"/>
          <DisplayClaim ClaimTypeReferenceId="email" Required="true"/>
          <DisplayClaim ClaimTypeReferenceId="givenName" Required="true"/>
          <DisplayClaim ClaimTypeReferenceId="surname" Required="true"/>
          <DisplayClaim ClaimTypeReferenceId="accountType" Required="true"/>
        </DisplayClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="reenterPassword"/>
          <OutputClaim ClaimTypeReferenceId="password" Required="true"/>
          <OutputClaim ClaimTypeReferenceId="email"/>
          <OutputClaim ClaimTypeReferenceId="givenName"/>
          <OutputClaim ClaimTypeReferenceId="surname"/>
          <OutputClaim ClaimTypeReferenceId="accountType" Required="true"/>
        </OutputClaims>
      </TechnicalProfile>
    </TechnicalProfiles>
  </ClaimsProvider>
</ClaimsProviders>



<!--
//////////////////////////
/////////////////////////
USER JOUNEYS
-->
<UserJourneys>
  <UserJourney Id="HelloWorldJourney">
    <OrchestrationSteps>
      <OrchestrationStep Order="1" Type="ClaimsExchange">
        <ClaimsExchanges>
          <ClaimsExchange Id="GetUserInformationClaimsExchange" TechnicalProfileReferenceId="UserInformationCollector"/>
        </ClaimsExchanges>
      </OrchestrationStep>
      <OrchestrationStep Order="2" Type="ClaimsExchange">
        <ClaimsExchanges>
          <ClaimsExchange Id="GetMessageClaimsExchange" TechnicalProfileReferenceId="ClaimGenerator"/>
        </ClaimsExchanges>
      </OrchestrationStep>
      <OrchestrationStep Order="3" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer"/>
    </OrchestrationSteps>
  </UserJourney>
</UserJourneys>



<!--
//////////////////////////
/////////////////////////
RELAYING PARTY
 Relying Party Here that's your policy’s entry point
 Specify the User Journey to execute
 Specify the claims to include in the token that is returned when the policy runs
-->
<RelyingParty>
  <DefaultUserJourney ReferenceId="HelloWorldJourney"/>
  <TechnicalProfile Id="HelloWorldPolicyProfile">
    <DisplayName>Hello World Policy Profile</DisplayName>
    <Protocol Name="OpenIdConnect"/>
    <OutputClaims>
      <OutputClaim ClaimTypeReferenceId="email" />
      <OutputClaim ClaimTypeReferenceId="objectId" PartnerClaimType="sub"/>
      <OutputClaim ClaimTypeReferenceId="displayName"/>
      <OutputClaim ClaimTypeReferenceId="message"/>
      <OutputClaim ClaimTypeReferenceId="accountType" />
    </OutputClaims>
    <SubjectNamingInfo ClaimType="sub"/>
  </TechnicalProfile>
</RelyingParty>
</TrustFrameworkPolicy>